cmdhistory=["(candyRead)" "(first qwer)" "(first \\"sffadf\\")" "(rest \\"fdfsdfsd\\")" "(next \\"fsdfsdfsd\\")" "(next (rest \\"viral\\"))" "(cons \\"o\\" \\"viral\\")" "(cons o \\"viral\\")" "(candyRead)" "()" "(candyRead)" "seq" "sasasasa" "(stackFibo 12)" "(stackFibo 999)" "(stackFibo 100000000000)" "(tailRecureFibo 99)" "(tailRecureFibo 9)" "(tailRecureFibo 90)" "(stackFibo 90)" "(tailRecureFibo 99)" "(tailRecureFibo 90)" "(rem 123456789 100)" "(count [21 12 12])" "(use [clojure.contrib.def \:only (defvar)])" "(partial odd? 1 2 3 4)" "(apply (partial odd? 1 2 3 4))" "(defn faux-curry [& args] (apply partial partial args))" "(faux-curry 12 12 13 14 15)" "(faux-curry true? (\= 1 1))" "((faux-curry true? (\= 1 1)))" "(- 1 2)" "(replace [12 13 14 15 16] 16 12)" "(replace [12 13 14 15 16] [16 12])" "(replace '((a b a b) b b ((a a ((a a)b)b)a)) 'a 'b)" "(replace '((a b) (((b g r) (f r)) c (d e)) b) 'b 'a)" "(declare m f)\\r\\n(defn m [n]\\r\\n(if (zero? n)\\r\\n0\\r\\n(- n (f (m (dec n))))))\\r\\n(defn f [n]\\r\\n(if (zero? n)\\r\\n1\\r\\n(- n (m (f (dec n))))))" "(time (m 250))" "(time (m 2500))" "(def m (memoize m))" "(def f (memoize f))" "(time (m 250))" "(time (m 210))" "(time (m 300))" "(time (m 3000))" "(time (m 2000))" "(time (m 1000))" "(time (m 1500))" "(time (m 1900))" "(time (m 1990))" "(time (m 1999))" "(time (m 2000))" "(time (m 3000))" "(time (m 30000))" "(time (m 25000))" "(rest [1 2 3 6 4 5])" "(seq (rest [1 2 3 6 4 5]))" "(next [1 2 3 6 4 5])" "(interleave \\"a\\" (take 10 (iterate (inc 1))))" "(interleave \\"a\\" (take 10 (iterate inc 1)))" "(take 10 (iterate inc 1))" "(interleave [\\"H\\" \\"G\\" \\"F\\" \\"E\\" \\"D\\" \\"C\\" \\"B\\" \\"A\\"](take 10 (iterate inc 1)))" "(interpose \\"a\\" (take 10 (iterate inc 1)))" "(intepose \\",\\" [\\"Viral\\" \\"L\\" \\"Savani\\"])" "(interpose \\",\\" [\\"Viral\\" \\"L\\" \\"Savani\\"])" "(apply (interpose \\",\\" [\\"Viral\\" \\"L\\" \\"Savani\\"]))" "(apply str (interpose \\",\\" [\\"Viral\\" \\"L\\" \\"Savani\\"]))" "(apply vec (interpose \\",\\" [\\"Viral\\" \\"L\\" \\"Savani\\"]))" "(hash-set [viral \:name l \:mi savani \:lname])" "(hash-set [\\"viral\\" \:name \\"l\\" \:mi \\"savani\\" \:lname])" "(hash-set \\"viral\\" \:name \\"l\\" \:mi \\"savani\\" \:lname)" "(take 10 (filter > 10 (iterate inc 1)))" "(take 10 (filter \#(> 10 %) (iterate inc 1)))" "(+ 3 4)" "(filter even? (20 10 32 9 7 5))" "(filter even? 20 10 32 9 7 5)" "(filter even? [20 10 32 9 7 5])" "(filter even? (set [20 10 32 9 7 5]))" "(filter even? (hash-set [20 10 32 9 7 5]))" "(take-while even? (set [10 20 30 5 7 79 99]))" "(take-while even? [10 20 30 5 7 79 99])" "(take-while (complement even?) [10 20 30 5 7 79 99])" "(complement even?)" "((complement even?) [1 2 3 4 5 6 7 8 9 0])" "((complement even?) 2)" "((complement even?) 2 2)" "((complement even?) [2 2])" "(take-while even? [10 20 30 5 7 79 99])" "(drop-while even? [10 20 30 5 7 79 99])" "(take-while (complement even?) 13])" "\=> (take-while (complement even?) 13)" "(take-while (complement even?) [10 20 30 5 7 79 99])" "(take-while (complement even?) [11])" "(take-while (complement even?) [11 13])" "(take-while (complement even?) [2 11 13])" "(split-at 5 [10 2 3 4 5 6 7 8 9])" "(split-with even? [10 20 30 40 1 3 7 9 3])" "(reduce \#{+ 10 %} (range 1 10))" "(reduce (+ 10 ) (range 1 10))" "(reduce \#(+ 10 %1) (range 1 10))" "(reduce \#(+ 10 %) (range 1 10))" "(reduce + 10 (range 1 10))" "(format \\"<<>>\\" \\"viral\\")" "(format \\"<<>>\\" [\\"viral\\" \\"l\\" \\"savani\\"])" "(format \\"<<%s>>\\" [\\"viral\\" \\"l\\" \\"savani\\"])" "(format \\"<<%s>>\\" [\\"viral\\"])" "(format \\"<<%s>>\\" [viral])" "(format \\"<<%s>>\\" [10])" "(for [word [\\"viral\\" \\"l\\" \\"savani\\"]] (format \\"<<%>>\\" word))" "(for [word [\\"viral\\" \\"l\\" \\"savani\\"]] (format \\"<<%s>>\\" word))" "(vec (for [word [\\"viral\\" \\"l\\" \\"savani\\"]] (format \\"<<%s>>\\" word)))" "(lazy-seq (for [word [\\"viral\\" \\"l\\" \\"savani\\"]] (format \\"<<%s>>\\" word)))" "(take 100(for [n (iterate inc 1) \:when (even? n)] n))" "(take 100(for [n (iterate inc 1) \:when (\= (/ n 5.0) 0)] n))" "(lazy-seq 10 20 30 40 50)" "(lazy-seq (10 20 30 40 50))" "(lazy-seq [10 20 30 40 50])" "(for [rank (range 1 9) file \\"ABCDEFGH\\"] (format \\"%c%d\\" file rank))" "(for [rank (range 1 9) file \\"ABCDEFGH\\"] (format \\" %c%d \\" file rank))" "(for [rank (range 1 9) file \\"ABCDEFGH\\"] (format \\"%c %d\\" file rank))" "(for [rank (range 1 9) file \\" \\"] (format \\"%c %d\\" file rank))" "(for [rank (range 1 9) file \\" \\"] (format \\" %c%d\\" file rank))" "(for [rank (range 1 9) file \\" \\"] (format \\"%c%d\\" file rank))" "(for [rank (range 1 9) file \\" \\"] (format \\"%c%d\\" rank file))" "(for [rank (range 1 9) file \\"ABCDEFGH\\"] (format \\"%c%d\\" rank file))" "(for [rank (range 1 9) file \\"ABCDEFGH\\"] (format \\"%d%c\\" rank file))" "(for [rank (range 1 9) file \\"ABCDEFGH\\"] (format \\"%d%c\\" file rank))" "(.bitCount 1000000)" "(cons 12 [1 2 3 4 5 6 7])" "(.toString [1 2 3 4])" "(.toString \#{1 2 3 4})" "(.toString (10 20 30 40))" "(reverse \\"viral l savani\\")" "(.toString (reverse \\"viral l savani\\"))" "(apply .toString (reverse \\"viral l savani\\"))" "(apply int (reverse \\"viral l savani\\"))" "(apply str (reverse \\"viral l savani\\"))" "(re-matcher \#\\"\\\\W+\\" \\"My name is VIRAL L SAVANI\\")" "(re-seq \#\\"\\\\W+\\" \\"My name is VIRAL L SAVANI\\")" "(re-seq \#\\"\\\\w+\\" \\"My name is VIRAL L SAVANI\\")" "(re-seq \#\\"\\\\w*\\" \\"My name is VIRAL L SAVANI\\")" "(re-seq \#\\"\\\\w\\" \\"My name is VIRAL L SAVANI\\")" "(re-seq \#\\"w+\\" \\"My name is VIRAL L SAVANI\\")" "(re-seq \#\\"w+\\" \\"My\\")" "(re-seq \#\\"w-\\" \\"My name is VIRAL L SAVANI\\")" "(import '(java.io File))" "(seq (.listFiles (File. \\".\\")))" "(re-seq \#\\"\\\\+w\\" \\"My name is VIRAL L SAVANI\\")" "(re-seq \#\\"\\\\S+\\" \\"My name is VIRAL L SAVANI\\")" "(re-seq \#\\"\\\\W+\\" \\"My name is VIRAL L SAVANI\\")" "(re-seq \#\\"\\\\w+\\" \\"My name is VIRAL L SAVANI\\")" "(peek [101 2 3 4])" "(hash-map [\\"viral\\" \:fname \\"l\\" \:mi])" "(hash-map {\\"viral\\" \:fname \\"l\\" \:mi})" "(hash-map [\\"viral\\" \:fname, \\"l\\" \:mi])" "(hash-map [\\"viral\\" \:fname])" "(hash-map [\:fname \\"viral\\"])" "(hash-map \:fname \\"viral\\" )" "(hash-map \:fname \\"viral\\" \:mi \\"l\\" \:lname \\"savani\\")" "(def (hash-map \:fname \\"viral\\" \:mi \\"l\\" \:lname \\"savani\\"))" "(def haspMap(hash-map \:fname \\"viral\\" \:mi \\"l\\" \:lname \\"savani\\"))" "hashMap" "haspMap" "(keys haspMap)" "(val haspMap)" "(vals haspMap)" "(get haspMap \:mi)" "(get haspMap \:m \\"NULL\\")" "(haspMap \:fname \\"NULL\\")" "(haspMap \:fne \\"NULL\\")" "(contains? haspMap \:fname)" "(assoc haspMap \:address \\"E Atherton\\")" "haspmap" "haspMap" "(defn date [person-1 person-2 & chaperones]\\r\\n(println person-1 \\"and\\" person-2\\r\\n\\"went out with\\" (count chaperones) \\"chaperones.\\" ))" "(date qwer tyui io op pp)" "(date [qwer tyui io op pp])" "(date \\"qwer\\" \\"tyui\\" \\"io\\" \\"op\\" \\"pp\\")" "(re-seq \#\\"\\\\W+\\" \\"A Tiger is big cat\\")" "(re-seq \#\\"\\\\w+\\" \\"A Tiger is big cat\\")" "(re-seq \#\\"w+\\" \\"A Tiger is big cat\\")" "(filter \#(< (count %) 2) (re-seq \#\\"\\\\w+\\" \\"A Tiger is big cat\\"))" "(filter \#(> (count %) 4) (re-seq \#\\"\\\\w+\\" \\"A Tiger is big cat\\"))" "(filter \#(\= (count %a) (count %b)) (re-seq \#\\"\\\\w+\\" \\"A Tiger is A big cat\\"))" "(filter \#(\= (count %) (count %)) (re-seq \#\\"\\\\w+\\" \\"A Tiger is A big cat\\"))" "foo 10"]
eclipse.preferences.version=1
